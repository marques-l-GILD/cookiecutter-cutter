name: CI/CD

on:
  push:
  workflow_dispatch:

jobs:
  code-analysis-unix:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Validate shell scripts
        shell: bash
        run: |
          set -euo pipefail

          die() { >&2 printf '\e[31;1m[FATAL] %s\e[0m\n' "$*"; exit 1; }
          err() { >&2 printf '\e[31;1m[ERROR] %s\e[0m\n' "$*"; }

          failed=n

          for sh in *.sh **/*.sh; do
            # skip non-files and glob-literals when a glob pattern fails to match
            [ -f "$sh" ] || continue
            bash -n "$sh" || { err "Syntax error in $sh"; failed=y; }
          done

          [ 'n' = "$failed" ] || die "Syntax errors found"

      - name: Run shellcheck
        run: |
          set -euo pipefail

          git config --global safe.directory "$PWD"

          git ls-files -z -- *.sh **/*.sh | xargs -0 docker run \
            -v "$PWD:/mnt" \
            --workdir /mnt \
            --rm \
            koalaman/shellcheck:latest --color

  code-analysis-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install PSScriptAnalyzer
        shell: pwsh
        run: |
          Install-Module -Name PSScriptAnalyzer -Scope CurrentUser -Force

      - name: Run PSScriptAnalyzer
        shell: pwsh
        run: |
          Get-ChildItem -Recurse *.ps1 | ForEach-Object { Invoke-ScriptAnalyzer -Path $_.FullName }

  build-unix:
    runs-on: ${{ matrix.os }}
    needs: [code-analysis-unix, code-analysis-windows]
    strategy:
      matrix:
        os:
          - ubuntu-latest        # x86_64
          - macos-latest         # universal2 (the python interpreter is universal2)
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Build package
        id: build
        shell: bash
        run: scripts/build.sh

      - name: Upload package
        uses: actions/upload-artifact@v3
        with:
          name: packages
          path: packages/${{ steps.build.outputs.package }}
          if-no-files-found: error

  build-windows:
    runs-on: windows-latest
    needs: [code-analysis-unix, code-analysis-windows]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Build package
        id: build
        shell: pwsh
        run: scripts/build.ps1

      - name: Upload package
        uses: actions/upload-artifact@v3
        with:
          name: packages
          path: packages/${{ steps.build.outputs.package }}
          if-no-files-found: error

  release:
    needs: [build-unix, build-windows]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download packages
        uses: actions/download-artifact@v3
        with:
          name: packages
          path: packages

      - name: Semantic Release
        id: semantic-release
        uses: cycjimmy/semantic-release-action@v4
        with:
          semantic_version: "22.0.7"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
